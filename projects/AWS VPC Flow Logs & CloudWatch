# 🚀 AWS VPC Flow Logs & CloudWatch Monitoring Project

## 🧩 Overview
This project demonstrates my hands-on ability to **design, deploy, and monitor network traffic in AWS** using **VPC Flow Logs**, **CloudWatch**, and **EC2**.  
The goal was to configure network monitoring and create a **custom CloudWatch alarm** that automatically triggers an **SNS notification** when abnormal network activity — such as packet rejections — occurs.

---

## 🛠️ Key Objectives
- Launch and connect to an **Amazon EC2 instance** using a properly secured `.pem` key.  
- Configure **VPC Flow Logs** to capture accepted and rejected traffic across network interfaces.  
- Create a **CloudWatch Log Group** and direct flow log data to it for visualization.  
- Build a **CloudWatch metric filter and alarm** to detect spikes in rejected traffic (`RejectCount`).  
- Integrate **Amazon SNS** for email-based alerts to ensure visibility into VPC-level security events.  
- Test alarm responsiveness by intentionally generating **REJECT** events using `curl` and network ACL rule manipulation.

---

## 🧠 What I Learned
- Gained a deep understanding of how **VPC Flow Logs** work at the network interface level, including **ACCEPT** vs. **REJECT** traffic logic.  
- Learned how to use **AWS CloudWatch metrics and alarms** to translate raw logs into actionable insights.  
- Practiced managing **IAM roles, log permissions, and SNS topics** for secure inter-service communication.  
- Strengthened my Linux command-line skills by using tools like `ping`, `curl`, and `ssh` to test network reachability and EC2 connectivity.  
- Enhanced my troubleshooting mindset — from **fixing key file permissions on Windows PowerShell** to diagnosing **“connection timed out” errors** and **CloudWatch alarm thresholds**.  

---

## 💡 Challenges I Overcame
This project didn’t go perfectly on the first try — and that’s exactly why it was valuable.  
I struggled through:
- Correcting **Windows PEM key file permissions** using advanced PowerShell commands (`icacls`, `takeown`, etc.).  
- Understanding how **Network ACLs** and **Security Groups** interact to allow or deny traffic.  
- Dealing with **Invalid token** SNS subscription confirmations and learning how AWS validates endpoints.  

Each obstacle forced me to slow down, debug methodically, and deepen my understanding of how AWS services interact — turning roadblocks into learning milestones.  

---

## 📊 Results
✅ Successfully set up an **end-to-end alerting system** that emails a notification within minutes of network rejects.  
✅ Verified **VPC Flow Logs** and **CloudWatch metrics** with live traffic data from test `curl` commands.  
✅ Demonstrated proficiency in **AWS monitoring, alerting, and network troubleshooting workflows**.

---

## 🧰 Technologies Used
- **AWS Services:** EC2, VPC, CloudWatch, IAM, SNS  
- **Tools:** PowerShell, Linux Terminal, Curl, Ping  
- **Languages & Configs:** Bash, YAML (for alarm configuration)  
- **Operating Systems:** Windows 11 (PowerShell) + Amazon Linux 2023 (EC2)  

---

## 🏁 Conclusion
This project was more than a technical setup — it was a practical deep dive into AWS networking and observability.  
I encountered real-world issues, debugged methodically, and proved I could **design, monitor, and secure a cloud network environment end-to-end**.

---

### ✨ Author
**Tyler Ites**  
📍 Denver, CO  
📧 [tites23@gmail.com](mailto:tites23@gmail.com)  
💼 *Aspiring CloudOps / DevOps Engineer*  
